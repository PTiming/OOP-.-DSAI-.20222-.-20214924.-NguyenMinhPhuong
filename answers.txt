1
The Container is a component in AWT that can contain another components (awt)
Container can add only a Component to itself (Swing)

The name of AWT Components is mainly not configurable, depends on the operating system.
The Swing name are configurable and mainly support pluggable.

2
import java.awt.*;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class NumberGrid extends JFrame{
    private JButton[] btnNumbers = new JButton[10];
    private JButton btnDelete, btnReset;
    private JTextField tfDisplay;

    public NumberGrid(){
        tfDisplay = new JTextField();
        tfDisplay.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

        JPanel panelButtons = new JPanel(new GridLayout(4,3));
        addButtons(panelButtons);

        Container cp = getContentPane();
        cp.setLayout(new BorderLayout());
        cp.add(tfDisplay, BorderLayout.NORTH);
        cp.add(panelButtons, BorderLayout.CENTER);

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("Number Grid");
        setSize(200,200);
        setVisible(true);
    }
    public void addButtons(JPanel panelButtons){
        ButtonListener btnListener = new ButtonListener();
        for(int i = 1; i<=9;i++){
            btnNumbers[i] = new JButton(""+i);
            panelButtons.add(btnNumbers[i]);
            btnNumbers[i].addActionListener(btnListener);

        }

            btnDelete = new JButton("DEL");
            panelButtons.add(btnDelete);
            btnDelete.addActionListener(btnListener);
            btnNumbers[0]= new JButton("0");
            panelButtons.add(btnNumbers[0]);
            btnNumbers[0].addActionListener(btnListener);

            btnReset = new JButton("C");
            panelButtons.add(btnReset);
            btnReset.addActionListener(btnListener);
        }
    public class ButtonListener implements ActionListener {
    @Override
    public void actionPerformed(ActionEvent e){
        String button = e.getActionCommand();
        if(button.charAt(0) >= '0' && button.charAt(0)<= '9'){
            tfDisplay.setText(tfDisplay.getText() + button);
        }
        else if (button.equals("DEL")){
            
        }
        else{
            
        }
    }


}
}
3
import java.util.ArrayList;

import java.awt.*;
import javax.swing.*;

public class StoreScreen {
    private Store store;

    JPanel createNorth(){
        JPanel north = new JPanel();
        north.setLayout(new BoxLayout(north, BoxLayout.Y_AXIS));
        north.add(createMenuBar());
        north.add(createHeader());
        return north;
    }

    JMenuBar createMenuBar(){
        JMenu menu = new JMenu("Options");

        JMenu smUpdateStore = new JMenu("Update Store");
        smUpdateStore.add(new JMenuItem("Add Book"));
        smUpdateStore.add(new JMenuItem("Add CD"));
        smUpdateStore.add(new JMenuItem("Add DVD"));

        menu.add(smUpdateStore);
        menu.add(new JMenuItem("View store"));
        menu.add(new JMenuItem("View cart"));

        JMenuBar menuBar = new JMenuBar();
        menuBar.setLayout(new FlowLayout(FlowLayout.LEFT));
        menuBar.add(menu);
        return menuBar;

    }

    JPanel createHeader(){
        JPanel header = new JPanel();
        header.setLayout(new BoxLayout(header, BoxLayout.X_AXIS));
        
        JLabel title = new JLabel("AIMS");
        title.setFont(new Font(title.getFont().getName(), Font.PLAIN, 50));
        title.setForeground(Color.CYAN);

        JButton cart = new JButton("View cart");
        cart.setPreferredSize(new Dimension(100,50));
        cart.setMaximumSize(new Dimension(100,50));

        header.add(Box.createRigidArea(new Dimension(10, 10)));
        header.add(title);
        header.add(Box.createHorizontalGlue());
        header.add(cart);
        header.add(Box.createRigidArea(new Dimension(10, 10)));

        return header;
    }

    JPanel createCenter(){
        JPanel center = new JPanel();
        center.setLayout(new GridLayout(3,3,2,2));
        ArrayList<Media> mediaInStore = store.getItemInStore();
        for (int i = 0; i < 9; i++){
            MediaStore cell = new MediaStore(mediaInStore.get(i));
            center.add(cell);
        }
        return center;
    }

        public StoreScreen(Store store){
            this.store = store;
            Container cp = getContentPane();
            cp.setLayout(new BorderLayout());
            
            cp.add(createNorth(), BorderLayout.NORTH);
            cp.add(createCenter(), BorderLayout.CENTER);

            setVisible(true);
            setTitle("Store");
            setSize(1024,768);
            
        }
}

6
import java.io.IOException;

import javax.swing.JFrame;

import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;

public class CartScreen extends JFrame {
    private Cart cart;

    public CartScreen(Cart cart){
        super();

        this.cart = cart;

        JFXPanel fxPanel = new JFXPanel();
        this.add(fxPanel);

        this.setTitle("Cart");
        this.setVisible(true);

        Platform.runLater(new Runnable(){
            @Override

            public void run(){
                try{
                    FXMLLoader loader = new FXMLLoader(getClass().getResource("/screen/fxml/cart.fxml"));
                    CartScreenController controller = new CartScreenController(cart);
                    loader.setController(controller);

                    Parent root = loader.load();
                    fxPanel.setScene(new Scene(root));

                } catch(IOException e){
                    e.printStackTrace();
                }
            }
        });
    }

}
7-8-9
import javax.swing.*;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;

public class CartScreenController {
    private Cart cart;
    
    @FXML
    private TableView<Media> tblMedia;

    @FXML
    private TableColumn<Media, String> colMediaTitle;

    @FXML
    private TableColumn<Media, String> colMediaCategory;

    @FXML
    private TableColumn<Media, Float> colMediaCost;

    public CartScreenController(Cart cart){
        super();
        this.cart = cart;
    }

    @FXML

    private void initialize(){
        colMediaTitle.setCellValueFactory(new PropertyValueFactory<Media, String>("title"));
        colMediaCategory.setCellValueFactory(new PropertyValueFactory<Media, String>("category"));
        colMediaCost.setCellValueFactory(new PropertyValueFactory<Media, Float>("cost"));

        tblMedia.setItems(this.cart.getItemsOrdered());

        btnPlay.setVisible(false);
        btnRemove.setVisible(false);

        tblMedia.getSelectionModel().selectedItemProperty().addListener(
            new ChangeListener<Media>(){

            @Override
            public void changed(ObservableValue<? extends Media> observable, Media oldValue, Media newValue){
                if (newValue != null){
                    upddateButtonBar(newValue);
                }
            }
        });
    }
    @FXML
    void upddateButtonBar(Media media){
        btnRemove.setVisible(true);
        if (media instanceof Playable){
            btnPlay.setVisible(true);
        }
        else{
            btnPlay.setVisible(false);
        }
    }

    @FXML
    void btnRemovePressed(ActionEvent event){
        Media media = tblMedia.getSelectionModel().getSelectedItem();
        cart.removeMedia(media);
    }
}
12
    public void addMedia(Media media) throws LimitExceededException{
        if (itemsOrdered.size() < MAX_NUMBERS_ORDERED){
            itemsOrdered.add(media);
            System.out.println("The item has been added.");

        }
        else {
            throw new LimitExceededException("ERROR: the number of media has reached its limit.");
        }
    }
   
    public void removeAuthor(String authorName) throws Exception{
        try {
            authors.remove(checkAuthor(authorName));
        }catch (Exception e){
            throw new Exception("There is no such author name.");
        }
    }
 13
 public class PlayerException extends Exception {

	public PlayerException() {
		// TODO Auto-generated constructor stub
	}

	public PlayerException(String message) {
		super(message);
		// TODO Auto-generated constructor stub
	}

	public PlayerException(Throwable cause) {
		super(cause);
		// TODO Auto-generated constructor stub
	}

	public PlayerException(String message, Throwable cause) {
		super(message, cause);
		// TODO Auto-generated constructor stub
	}

	public PlayerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
		super(message, cause, enableSuppression, writableStackTrace);
		// TODO Auto-generated constructor stub
	}

}
interface Playable {
    public void play() throws PlayerException;
}
public void play() throws PlayerException{
        System.out.println("Playing DVD: " + this.getTitle());
        System.out.println("DVD length: " + this.getLength());
        if (this.getLength() > 0){
            this.play();
        }
        else {
            throw new PlayerException("ERROR: DVD length is non-positive");
        }
    }
public void play() throws PlayerException {
        System.out.println("Playing DVD: " + this.getTitle());
        System.out.println("DVD length: " + this.getLength());
        if (this.getLength() > 0){
            this.play();
        }
        else {
            throw new PlayerException("ERROR: Track length is non-positive");
        }
    }
    public void play() throws PlayerException{
        if (this.getLength() > 0){
            System.out.println("Artist: "+this.getArtist());
            System.out.println("Number of tracks: "+tracks.size());

            java.util.Iterator iter = tracks.iterator();
            Track nextTrack;
            while(iter.hasNext()){
                nextTrack = (Track) iter.next();
                try{
                    nextTrack.play();
                } catch (PlayerException e){
                    throw e;
                }

            }
        }
        else{
            throw new PlayerException("ERROR: CD length is non-positive.");
        }
    }
14
public static void playMedia(Store store, Scanner myInput){

            String userInputTitle = myInput.nextLine();
            if (store.contains(userInputTitle) != -1){
                if ((store.getItemInStore().get(store.contains(userInputTitle)) instanceof CompactDisc)){
                    CompactDisc cd = (CompactDisc) store.getItemInStore().get(store.contains(userInputTitle));
                    try {
                        cd.play();
                    } catch(PlayerException e){

                    }
                }
                else if (store.getItemInStore().get(store.contains(userInputTitle)) instanceof DigitalVideoDisc){
                    DigitalVideoDisc dvd = (DigitalVideoDisc) store.getItemInStore().get(store.contains(userInputTitle));
                    try {
                        dvd.play();
                    } catch(PlayerException e){
                        
                    }
                }
            }
            else{
                System.out.println("There is no such item.");
            }
        }
    15
    public boolean equals(Object o) throws ClassCastException, NullPointerException{
        if (o == null){
            throw new NullPointerException("The media to compare is null.");
        }
        else if (o instanceof Media){
            Media m1 = (Media) o;
            return m1.title == this.title;
        }
        else{
            throw new ClassCastException("Can't compare the different type media.");
        }
    }
